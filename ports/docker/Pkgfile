version="20.10.17"
runc_version="1.1.3"
containerd_version="1.6.6"
docker_commit="$version"
tini_version="master"
libnetwork_version="master"
buildx_version="master"
common_version="0.48.0"
image_version="5.19.4"
podman_version="4.1.1"
skopeo_version="1.8.0"
storage_version="1.38.4"
desc='CLI tool for managing OCI compliant containers'
deps=["libseccomp", "linux"]
makedeps=["libseccomp", "linux", "git", "go"]
source=[
	{url="https://github.com/opencontainers/runc/releases/download/v$runc_version/runc.tar.xz",name="runc-$runc_version.tar.xz"},
	{url="https://github.com/containerd/containerd/archive/v$containerd_version.tar.gz",name="containerd-$containerd_version.tar.gz"},
	{url="https://github.com/docker/cli/archive/v$version.tar.gz",name="cli-$version.tar.gz"},
	{url="https://github.com/moby/moby/archive/v$version.tar.gz",name="moby-$version.tar.gz"},
	{url="https://github.com/krallin/tini/archive/refs/heads/$tini_version.zip",name="tini-$tini_version.zip"},
	{url="https://github.com/moby/libnetwork/archive/refs/heads/$libnetwork_version.zip",name="libnetwork-$libnetwork_version.zip"},
	{url="https://github.com/docker/buildx/archive/refs/heads/$buildx_version.zip",name="buildx-$buildx_version.zip"},
	{url="docker.sysusers"},
	{url="mounts.conf"},
	{url="noname.patch"},
	{name="common-${common_version}.tar.gz",url="https://github.com/containers/common/archive/v${common_version}.tar.gz"},
	{name="image-${image_version}.tar.gz",url="https://github.com/containers/image/archive/v${image_version}.tar.gz"},
	{name="podman-${podman_version}.tar.gz",url="https://github.com/containers/podman/archive/v${podman_version}.tar.gz"},
	{name="skopeo-${skopeo_version}.tar.gz",url="https://github.com/containers/skopeo/archive/v${skopeo_version}.tar.gz"},
	{name="storage-${storage_version}.tar.gz",url="https://github.com/containers/storage/archive/v${storage_version}.tar.gz"},
]

build='''
	set -x
	export GO111MODULE=off
	export GOPATH="$PWD"
	export PATH="$GOPATH/bin:$PATH"
	export BUILDTAGS="no_btrfs seccomp"
	export CGO_CPPFLAGS="${CPPFLAGS}"
	export CGO_CFLAGS="${CFLAGS}"
	export CGO_CXXFLAGS="${CXXFLAGS}"
	export CGO_LDFLAGS="${LDFLAGS}"

	mkdir -p src/github.com/opencontainers
	mv runc-$runc_version src/github.com/opencontainers/runc
	cd src/github.com/opencontainers/runc
	git init
	git commit --allow-empty -m "init"
	export GOFLAGS="-trimpath -mod=readonly -modcacherw"
	make runc
	install -Dm755 runc "$pkgdir/bin/runc"
	install -Dm644 contrib/completions/bash/runc "$pkgdir/share/bash-completion/completions/runc"
	cd -

	mkdir -p src/github.com/containerd
	mv containerd-$containerd_version src/github.com/containerd/containerd
	cd src/github.com/containerd/containerd
	git init
	git commit --allow-empty -m "init"
	sed -i 's,/sbin,/bin,;s,/usr/local,/,' containerd.service
	export GOFLAGS="-trimpath -mod=readonly -modcacherw"
	make VERSION=v$containerd_version GO_GCFLAGS="" EXTRA_LDFLAGS="-buildid="
	make install PREFIX=/ DESTDIR="$pkgdir"
	install -Dm644 containerd.service "$pkgdir"/lib/systemd/system/containerd.service
	cd -

	export GOFLAGS='-buildmode=pie -trimpath -mod=readonly -modcacherw -ldflags=-linkmode=external'

	mkdir -p src/github.com/docker
	mv cli-$version src/github.com/docker/cli
	cd src/github.com/docker/cli
	LDFLAGS=""
	DISABLE_WARN_OUTSIDE_CONTAINER=1 make VERSION=$version dynbinary
	install -Dm755 build/docker "$pkgdir/bin/docker"
	install -Dm644 'contrib/completion/bash/docker' "$pkgdir/share/bash-completion/completions/docker"
	install -Dm644 'contrib/completion/zsh/_docker' "$pkgdir/share/zsh/site-functions/_docker"
	install -Dm644 'contrib/completion/fish/docker.fish' "$pkgdir/share/fish/vendor_completions.d/docker.fish"
	#install -dm755 "$pkgdir/share/man"
	#cp -r man/man* "$pkgdir/share/man"
	cd -

	mkdir -p src/github.com/docker
	mv moby-$version src/github.com/docker/docker
	cd src/github.com/docker/docker
	DOCKER_GITCOMMIT=$docker_commit \
	DOCKER_BUILDTAGS="exclude_graphdriver_btrfs seccomp journald" \
	VERSION=$version \
	hack/make.sh dynbinary
	install -Dm755 bundles/dynbinary-daemon/dockerd "$pkgdir"/bin/dockerd
	install -Dm644 'contrib/init/systemd/docker.service' "$pkgdir/lib/systemd/system/docker.service"
	install -Dm644 'contrib/init/systemd/docker.socket' "$pkgdir/lib/systemd/system/docker.socket"
	install -Dm644 'contrib/udev/80-docker.rules' "$pkgdir/lib/udev/rules.d/80-docker.rules"
	install -Dm644 "$srcdir/docker.sysusers" "$pkgdir/lib/sysusers.d/docker.conf"
	cd -

	mkdir -p src/github.com/docker
	mv libnetwork-$libnetwork_version src/github.com/docker/libnetwork
	cd src/github.com/docker/libnetwork
	go build github.com/docker/libnetwork/cmd/proxy
	install -Dm755 proxy "$pkgdir/bin/docker-proxy"
	cd -

	mkdir -p src/github.com/krallin
	mv tini-$tini_version src/github.com/krallin/tini
	cd src/github.com/krallin/tini
	cmake .
	make tini-static
	install -Dm755 tini-static "$pkgdir/bin/docker-init"
	cd -

	mkdir -p src/github.com/docker
	mv buildx-$buildx_version src/github.com/docker/buildx
	cd src/github.com/docker/buildx
	go build -o docker-buildx -ldflags "-X main.experimental=1 -linkmode=external" ./cmd/buildx
	install -Dm755 docker-buildx "$pkgdir/lib/docker/cli-plugins/docker-buildx"
	cd -

	install -vdm 755 "${pkgdir}/etc/containers/oci/hooks.d/"
	install -vdm 755 "${pkgdir}/etc/containers/registries.conf.d/"
	install -vdm 755 "${pkgdir}/share/containers/oci/hooks.d/"
	install -vdm 755 "${pkgdir}/var/lib/containers/"

	# configs
	install -vDm 644 mounts.conf -t "${pkgdir}/etc/containers/"

	cd "common-${common_version}"
	install -vDm 644 pkg/config/containers.conf -t "${pkgdir}/etc/containers/"
	install -vDm 644 pkg/config/containers.conf -t "${pkgdir}/share/containers/"
	install -vDm 644 pkg/seccomp/seccomp.json -t "${pkgdir}/etc/containers/"
	install -vDm 644 pkg/seccomp/seccomp.json -t "${pkgdir}/share/containers/"
	#install -vDm 644 docs/*.5 -t "${pkgdir}/share/man/man5/"
	cd -

	cd "image-${image_version}"
	# configs
	install -vDm 644 registries.conf -t "${pkgdir}/etc/containers/"
	# man pages
	#install -vDm 644 docs/*.1 -t "${pkgdir}/share/man/man1/"
	#install -vDm 644 docs/man5/*.5 -t "${pkgdir}/share/man/man5/"
	cd -

	cd "podman-${podman_version}"
	#install -vDm 644 *.5 -t "${pkgdir}/share/man/man5/"
	cd -

	cd "skopeo-${skopeo_version}"
	# configs
	install -vDm 644 default-policy.json "${pkgdir}/etc/containers/policy.json"
	install -vDm 644 default.yaml -t "${pkgdir}/etc/containers/registries.d/"
	cd -

	cd "storage-${storage_version}"
	# configs
	install -vDm 644 storage.conf -t "${pkgdir}/etc/containers/"
	install -vDm 644 storage.conf -t "${pkgdir}/share/containers/"
	# man pages
	#install -vDm 644 docs/*.1 -t "${pkgdir}/share/man/man1/"
	#install -vDm 644 docs/*.5 -t "${pkgdir}/share/man/man5/"
	cd -
'''
