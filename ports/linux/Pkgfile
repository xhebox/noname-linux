version="6.0.7"
compiler_flags="CC=clang HOSTCC=clang LD=ld.lld LLVM=1 LLVM_IAS=1"
_kernelname="noname"
xanmod="1"
desc="Linux system kernel"
source=[
	{url="http://mirrors.ustc.edu.cn/kernel.org/linux/kernel/v${version%%.*}.x/linux-${version%.*}.tar.xz"},
	{url="https://github.com/xanmod/linux/releases/download/${version}-xanmod1/patch-${version}-xanmod1.xz"},
	{url="fix-musl-objtool.patch"},
	{url="headers.patch"},
	{url="musl.patch"},
	{url="linux.preset"},
]
makedeps=["bc", "bash", "inetutils", "elfutils", "pahole", "libarchive", "llvm"]
deps=["kmod" , "linux-firmware", "coreutils"]

ext='''
	unset CC
	unset CXX
	unset CFLAGS
	unset CXXFLAGS
	unset LDFLAGS

	cd linux-${version%.*}
	scripts/setlocalversion --save-scmversion
	touch ./localversion.10-pkgrel
	echo "-$_kernelname" > ./localversion.20-pkgname

	patch -Np1 -i ../fix-musl-objtool.patch
	patch -Np1 -i ../headers.patch
	patch -Np1 -i ../patch-${version}-xanmod${xanmod}

	cp -vf CONFIGS/xanmod/gcc/config_x86-64-v3 .config

	sed -i 's/\$(LIBS)/& $(LDFLAGS)/' tools/power/cpupower/bench/Makefile
	sed -i 's/SIGCLD/SIGCHLD/g' tools/usb/usbip/src/usbipd.c
	sed -i 's/cpio/bsdcpio/g' kernel/gen_kheaders.sh
	sed -i 's/u_char/unsigned char/g' drivers/accessibility/speakup/utils.h

#	scripts/config --enable LTO \
#		--enable LTO_CLANG \
#		--enable ARCH_SUPPORTS_LTO_CLANG \
#		--enable ARCH_SUPPORTS_LTO_CLANG_THIN \
#		--disable LTO_NONE \
#		--enable HAS_LTO_CLANG \
#		--disable LTO_CLANG_FULL \
#		--enable LTO_CLANG_THIN \
#		--enable HAVE_GCC_PLUGINS

	scripts/config --enable CONFIG_STACK_VALIDATION
  scripts/config --enable CONFIG_IKCONFIG --enable CONFIG_IKCONFIG_PROC
	scripts/config --enable CONFIG_MODULE_COMPRESS_ZSTD

	make ${compiler_flags} olddefconfig
	make -s kernelrelease > ../version
'''

build='''
	unset CC
	unset CXX
	unset CFLAGS
	unset CXXFLAGS
	unset LDFLAGS

	cd linux-${version%.*}

	make ${compiler_flags} all

	install -Dm644 `make -s image_name` "${pkgdir}/boot/vmlinuz-${_kernelname}"

	kernver=`cat ../version`
	modulesdir="${pkgdir}/lib/modules/${kernver}"
	mkdir -p "${modulesdir}"
	make INSTALL_MOD_PATH="$pkgdir" INSTALL_MOD_STRIP=1 modules_install

	extramodules="extramodules-$_kernelname"
	extradir="$pkgdir/lib/modules/$extramodules"
	install -Dt "$extradir" -m644 ../version
	ln -srf "$extradir" "$modulesdir/extramodules"
	rm -rf "${modulesdir}/source" "${modulesdir}/build"

	subst="s|%PKGBASE%|$_kernelname|g
	s|%KERNVER%|$kernver|g
	s|%EXTRAMODULES%|$extramodules|g"

	sed "$subst" ../linux.preset | install -Dm644 /dev/stdin "${pkgdir}/etc/mkinitcpio.d/linux-${_kernelname}.preset"

	builddir="$pkgdir/lib/modules/$kernver/build"

	install -Dt "$builddir" -m644 Makefile .config Module.symvers System.map vmlinux
	install -Dt "$builddir/kernel" -m644 kernel/Makefile
	install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
	cp -t "$builddir" -a scripts

	install -Dt "$builddir/tools/objtool" tools/objtool/objtool
	mkdir -p "$builddir/fs/xfs"
	mkdir -p "$builddir/mm"
	mkdir -p "$builddir/.tmp_versions"

	cp -t "$builddir" -a include
	cp -t "$builddir/arch/x86" -a arch/x86/include
	install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s
	install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
	install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h
	install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h
	install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
	install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
	install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h
	find . -name Kconfig -exec install -Dm644 {} "$builddir/{}" \;
	
	for arch in "$builddir"/arch/*/; do
		_arch="${arch%%/}"
		_arch="${_arch##*/}"
		if [ "$_arch"="x86" ]; then
			continue
		fi
		rm -rf "$arch"
	done
	rm -rf "$builddir/Documentation"
	find -L "$builddir" -type l -delete
	find "$builddir" -type f -name '*.o' -delete
	
	mkdir -p "$pkgdir/src"
	ln -srf "$builddir" "$pkgdir/src/$version-$_kernelname"

	#patch -Np1 -i ../headers.patch
	make headers
	find usr/include -type f -not -name '*.h' -exec rm -rf {} \;
	find usr/include -type d -empty -delete
	cp -rv usr/include "$pkgdir"
	rm -rf "$pkgdir/include/drm"
'''
