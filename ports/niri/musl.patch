--- niri-0.1.9/src/utils/spawning.rs	2024-09-14 16:55:52.000000000 +0800
+++ niri-0.1.9/src/utils/spawning.rs	2024-09-14 16:55:52.000000000 +0800
@@ -180,7 +180,7 @@
     use super::*;
 
     pub fn do_spawn(command: &OsStr, mut process: Command) -> Option<Child> {
-        use libc::close_range;
+        use syscalls::{Sysno, raw_syscall};
 
         // When running as a systemd session, we want to put children into their own transient
         // scopes in order to separate them from the niri process. This is helpful for
@@ -252,8 +252,8 @@
                             // We're going to exit afterwards. Close all other FDs to allow
                             // Command::spawn() to return in the parent process.
                             let raw = pipe.as_raw_fd() as u32;
-                            let _ = close_range(0, raw - 1, 0);
-                            let _ = close_range(raw + 1, !0, 0);
+                            let _ = unsafe { raw_syscall!(Sysno::close_range, 0, raw - 1, 0) };
+                            let _ = unsafe { raw_syscall!(Sysno::close_range, raw + 1, !0, 0) };
 
                             let _ = read_all(pipe, &mut [0]);
                         }
--- niri-0.1.9/Cargo.toml	2024-09-14 16:55:52.000000000 +0800
+++ niri-0.1.9/Cargo.toml	2024-09-14 16:55:52.000000000 +0800
@@ -81,6 +81,7 @@
 tracing-subscriber.workspace = true
 tracing.workspace = true
 tracy-client.workspace = true
+syscalls = { version = "0.6", default-features = false }
 url = { version = "2.5.2", optional = true }
 wayland-backend = "0.3.7"
 wayland-scanner = "0.31.5"
