version="4.9.3"
common_version="0.57.4"
image_version="5.24.2"
shortnames_version="2023.02.20"
skopeo_version="1.14.2"
storage_version="1.53.0"
catatonit_version="0.2.0"
conmon_version="2.1.10"
criu_version="3.18"
crun_version="1.14.4"
podman_version="$version"
fuse_version="1.13"
cni_version="1.4.0"
slirp_version="1.2.3"
buildah_version="1.34.1"
desc='CLI tool for managing OCI compliant containers'
nostrip=true
deps=["libseccomp", "linux", "python3", "systemd", "libcap", "yajl", "fuse3", "libslirp", "iptables"]
makedeps=["libseccomp", "linux", "python3", "systemd", "libcap", "yajl", "fuse3", "libslirp", "go"]
source=[
	{name="common-${common_version}.tar.gz",url="https://github.com/containers/common/archive/v${common_version}.tar.gz"},
	{name="image-${image_version}.tar.gz",url="https://github.com/containers/image/archive/v${image_version}.tar.gz"},
	{name="skopeo-${skopeo_version}.tar.gz",url="https://github.com/containers/skopeo/archive/v${skopeo_version}.tar.gz"},
	{name="storage-${storage_version}.tar.gz",url="https://github.com/containers/storage/archive/v${storage_version}.tar.gz"},
	{name="shortnames-${shortnames_version}.tar.gz",url="https://github.com/containers/shortnames/archive/refs/tags/v${shortnames_version}.tar.gz"},
	{name="catatonit-${catatonit_version}.tar.xz",url="https://github.com/openSUSE/catatonit/releases/download/v${catatonit_version}/catatonit.tar.xz"},
	{name="conmon-${conmon_version}.tar.gz",url="https://github.com/containers/conmon/archive/refs/tags/v${conmon_version}.tar.gz"},
	{name="criu-${criu_version}.tar.gz",url="https://github.com/checkpoint-restore/criu/archive/refs/tags/v${criu_version}.tar.gz"},
	{name="crun-${crun_version}.tar.gz",url="https://github.com/containers/crun/releases/download/${crun_version}/crun-${crun_version}.tar.xz"},
	{name="podman-${podman_version}.tar.gz",url="https://github.com/containers/podman/archive/v${podman_version}.tar.gz"},
	{name="fuse-${fuse_version}.tar.gz",url="https://github.com/containers/fuse-overlayfs/archive/refs/tags/v${fuse_version}.tar.gz"},
	{name="cni-${cni_version}.tar.gz",url="https://github.com/containernetworking/plugins/archive/v${cni_version}/plugins-v${cni_version}.tar.gz"},
	{name="slirp-${slirp_version}.tar.gz",url="https://github.com/rootless-containers/slirp4netns/archive/refs/tags/v${slirp_version}.tar.gz"},
	{name="buildah-${buildah_version}.tar.gz",url="https://github.com/containers/buildah/archive/refs/tags/v${buildah_version}.tar.gz"},
	{url="mounts.conf"},
	{url="docker.sysusers"},
]

build='''
	set -x
	export GOPATH="$PWD"
	export GOCACHE="$PWD/cache"
	export GOMODCACHE="$PWD/modcache"
	export CGO_CPPFLAGS="${CPPFLAGS}"
	export CGO_CFLAGS="${CFLAGS}"
	export CGO_CXXFLAGS="${CXXFLAGS}"
	export CGO_LDFLAGS="${LDFLAGS}"
	export GOFLAGS="-buildmode=pie -trimpath"
	export BUILDTAGS="containers_image_openpgp containers_image_ostree_stub seccomp systemd btrfs_noversion exclude_graphdriver_devicemapper exclude_graphdriver_btrfs"
	export PATH=$PWD/bin:$PATH
	GOBINPATH=$PWD/bin go install github.com/a8m/envsubst/cmd/envsubst@latest

	# containers common
	install -vdm 755 "$pkgdir/etc/containers/containers.conf.d/"
	install -vdm 755 "$pkgdir/etc/containers/oci/hooks.d/"
	install -vdm 755 "$pkgdir/etc/containers/registries.conf.d/"
	install -vdm 755 "$pkgdir/share/containers/oci/hooks.d/"
	install -vdm 755 "$pkgdir/var/lib/containers/"

	install -vDm 644 mounts.conf -t "${pkgdir}/etc/containers/"

	cd common-${common_version}
	sed -i 's/libexec/lib/g' pkg/config/containers.conf
	install -vDm 644 pkg/config/containers.conf -t "${pkgdir}/etc/containers/"
	install -vDm 644 pkg/config/containers.conf -t "${pkgdir}/share/containers/"
	install -vDm 644 pkg/seccomp/seccomp.json -t "${pkgdir}/etc/containers/"
	install -vDm 644 pkg/seccomp/seccomp.json -t "${pkgdir}/share/containers/"
	cd ..

	cd "image-${image_version}"
	install -vDm 644 registries.conf -t "${pkgdir}/etc/containers/"
	cd ..

	cd shortnames-${shortnames_version}
	install -vDm 644 shortnames.conf "$pkgdir/etc/containers/registries.conf.d/00-shortnames.conf"
	cd ..

	cd "skopeo-${skopeo_version}"
	install -vDm 644 default-policy.json "${pkgdir}/etc/containers/policy.json"
	install -vDm 644 default.yaml -t "${pkgdir}/etc/containers/registries.d/"
	cd ..

	cd "storage-${storage_version}"
	install -vDm 644 storage.conf -t "${pkgdir}/etc/containers/"
	install -vDm 644 storage.conf -t "${pkgdir}/share/containers/"
	cd ..

	cd catatonit-${catatonit_version}
	#patch -Np1 -i "$srcdir"/catatonit-${catatonit_version}.patch
	autoreconf -fiv
	./configure --prefix=/
  make PREFIX= DESTDIR="$pkgdir" install
	install -vdm 755 "$pkgdir/lib/podman/"
	ln -sv /bin/catatonit "$pkgdir/lib/podman/"
	cd ..

	cd "conmon-${conmon_version}"
	make PREFIX=/ LIBEXECDIR=/lib DESTDIR="$pkgdir"
	install -Dm755 bin/conmon "$pkgdir/bin/conmon"
	cd ..

	cd "fuse-overlayfs-${fuse_version}"
	./autogen.sh
	./configure \
		--prefix=/ \
		--sbindir=/bin
	make DESTDIR="$pkgdir" install
	cd ..

	cd "slirp4netns-${slirp_version}"
	./autogen.sh
	./configure --prefix=/
	make DESTDIR="$pkgdir" install
	cd ..

	cd "criu-${criu_version}"
#	make \
#    DESTDIR="$pkgdir" \
#    PREFIX=/ \
#    SBINDIR=/bin \
#    LIBDIR=/lib \
#    LIBEXECDIR=/lib \
#		install-lib install-criu install-compel install-amdgpu_plugin
#  rm -rf \
#    "$pkgdir/include/compel/common/asm" \
#    "$pkgdir/var"
	cd ..

	cd "crun-${crun_version}"
	./autogen.sh
	./configure \
		--prefix=/ \
		--enable-shared \
		--enable-dynamic \
		--with-python-bindings
	make DESTDIR="$pkgdir" install
	cd ..

	cd "plugins-${cni_version}"
	for plugin in plugins/meta/* plugins/main/* plugins/ipam/*; do
		if [ -e "$plugin" ]  && [ "${plugin%windows}" = "${plugin}" ]; then
			go build -o bin/ -ldflags "-compressdwarf=false -linkmode external" "./$plugin"
		fi
	done
	install -vDm755 bin/* -t "$pkgdir/lib/cni/"
	strip "$pkgdir/lib/cni/"*
	install -vDm755 bin/* -t "$pkgdir/opt/cni/bin/"
	install -vdm755 "$pkgdir/etc/cni/net.d/"
	install -vDm644 plugins/ipam/dhcp/systemd/* -t "$pkgdir/lib/systemd/system/"
	cd ..

	cd "podman-${podman_version}"
	sed -i 's/libexec/lib/g' vendor/github.com/containers/common/pkg/config/default.go
  make -j1 EXTRA_LDFLAGS='-s -w -linkmode=external' PREFIX=/
	make install install.completions DESTDIR="$pkgdir" PREFIX=/ LIBEXECDIR=/lib
	make -j1 install.docker DESTDIR="$pkgdir" PREFIX=/
	cd ..

	cd "buildah-${buildah_version}"
	make PREFIX=/ 
  make DESTDIR="$pkgdir" PREFIX=/ install install.completions
	cd ..
'''
