--- systemd-stable-255.4/src/boot/efi/efi.h	2024-02-28 01:26:04.000000000 +0800
+++ systemd-stable-255.4/src/boot/efi/efi.h	2024-02-28 01:26:04.000000000 +0800
@@ -10,9 +10,9 @@
 
 #if SD_BOOT
 /* uchar.h/wchar.h are not suitable for freestanding environments. */
-typedef __WCHAR_TYPE__ wchar_t;
-typedef __CHAR16_TYPE__ char16_t;
-typedef __CHAR32_TYPE__ char32_t;
+#define wchar_t __WCHAR_TYPE__
+#define char16_t __CHAR16_TYPE__
+#define char32_t __CHAR32_TYPE__
 
 /* Let's be paranoid and do some sanity checks. */
 assert_cc(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__);
--- systemd-stable-255.4/src/basic/fs-util.h	2024-03-05 13:11:39.739260214 +0800
+++ systemd-stable-255.4/src/basic/fs-util.h	2024-03-05 13:11:39.739260214 +0800
@@ -6,6 +6,7 @@
 #include <limits.h>
 #include <stdbool.h>
 #include <stdint.h>
+#include <sys/file.h>
 #include <sys/stat.h>
 #include <sys/types.h>
 #include <unistd.h>
--- systemd-stable-255.4/src/basic/user-util.c	2024-02-28 01:26:04.000000000 +0800
+++ systemd-stable-255.4/src/basic/user-util.c	2024-02-28 01:26:04.000000000 +0800
@@ -987,9 +987,6 @@
 
         errno = 0;
         struct passwd *p = fgetpwent(stream);
-        if (!p && errno != ENOENT)
-                return errno_or_else(EIO);
-
         *pw = p;
         return !!p;
 }
@@ -1000,9 +997,6 @@
 
         errno = 0;
         struct spwd *s = fgetspent(stream);
-        if (!s && errno != ENOENT)
-                return errno_or_else(EIO);
-
         *sp = s;
         return !!s;
 }
@@ -1013,9 +1007,6 @@
 
         errno = 0;
         struct group *g = fgetgrent(stream);
-        if (!g && errno != ENOENT)
-                return errno_or_else(EIO);
-
         *gr = g;
         return !!g;
 }
@@ -1027,9 +1018,6 @@
 
         errno = 0;
         struct sgrp *s = fgetsgent(stream);
-        if (!s && errno != ENOENT)
-                return errno_or_else(EIO);
-
         *sg = s;
         return !!s;
 }
